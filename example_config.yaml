runs: 1
results_path: tmp/results
agents:
  - name: qodo-cover 
    version: "0.2.11"
    setup_script: |
      echo "Set up cover agent (LLM: $OPENAI_API_BASE, API_KEY: $OPENAI_API_KEY)" >> /tmp/setup.log;
      apt update;
      apt install -y python3-pip pipx && echo "Installed pip" >> /tmp/setup.log;
      pipx install git+https://github.com/qodo-ai/qodo-cover.git@0.2.11 && pipx ensurepath && echo "Installed cover agent" >> /tmp/setup.log;
    command: |
      echo "Running cover agent (LLM: $OPENAI_API_BASE, API_KEY: $OPENAI_API_KEY)" >> /tmp/setup.log;
      env >> /tmp/setup.log;
      cd /todolist && \
      /root/.local/bin/cover-agent \
        --source-file-path "$FILE_PATH" \
        --test-file-path "$TEST_FILE_PATH" \
        --project-root "$PROJECT_ROOT" \
        --code-coverage-report-path "$COVERAGE_REPORT_PATH" \
        --test-command "$TEST_COMMAND" \
        --test-command-dir "$PROJECT_ROOT" \
        --coverage-type "cobertura" \
        --desired-coverage 100 \
        --api-base "$OPENAI_API_BASE" \
        --max-iterations 10 2>&1 | tee -a /tmp/cover-agent.log
  - name: kwaak
    version: "v0.1.6"
    setup_script: |
      apt update;
      apt install -y curl fd-find ripgrep gettext-base; # needed for envsubst
      echo "Installed apt packages" >> /tmp/setup.log;
      ln -s $(which fdfind) /usr/local/bin/fd
      echo "Installed fd" >> /tmp/setup.log;
      curl --proto '=https' --tlsv1.2 -LsSf https://github.com/bosun-ai/kwaak/releases/download/v0.1.6/kwaak-installer.sh | sh
      echo "Set up kwaak agent: $?" >> /tmp/setup.log;
      source $HOME/.cargo/env

      cat <<- "CONFIG_EOF" > /tmp/kwaak.toml
      language = "$LANGUAGE"
      tool_executor = "local"

      [github]
      owner = "bosun-ai"
      repository = "todolist"
      main_branch = "master"

      [commands]
      test = "$TEST_COMMAND"
      coverage = "$TEST_COMMAND"

      [llm.indexing]
      api_key = "text:$OPENAI_API_KEY"
      provider = "OpenAI"
      prompt_model = "gpt-4o-mini"
      base_url = "$OPENAI_API_BASE"

      [llm.query]
      api_key = "text:$OPENAI_API_KEY"
      provider = "OpenAI"
      prompt_model = "gpt-4o"
      base_url = "$OPENAI_API_BASE"

      [llm.embedding]
      api_key = "text:$OPENAI_API_KEY"
      provider = "OpenAI"
      embedding_model = "text-embedding-3-large"
      base_url = "$OPENAI_API_BASE"

      CONFIG_EOF
    command: |
      echo "Running kwaak agent" >> /tmp/setup.log;
      source $HOME/.cargo/env
      
      # Determining project language by examining the files in the $PROJECT_ROOT. If there's a package.json, it's a Node.js project.
      # if there's a Cargo.toml, it's a Rust project. If there's a requirements.txt, it's a Python project.
      if [ -f $PROJECT_ROOT/package.json ]; then
        echo "Detected Node.js project" >> /tmp/setup.log;
        export LANGUAGE="Typescript"
      elif [ -f $PROJECT_ROOT/Cargo.toml ]; then
        echo "Detected Rust project" >> /tmp/setup.log;
        export LANGUAGE="Rust"
      elif [ -f $PROJECT_ROOT/requirements.txt ]; then
        echo "Detected Python project" >> /tmp/setup.log;
        export LANGUAGE="Python"
      fi

      env >> /tmp/setup.log;

      cat /tmp/kwaak.toml | envsubst > /tmp/kwaak.rendered.toml
      cd $PROJECT_ROOT && \
      kwaak -c /tmp/kwaak.rendered.toml -m run-agent -i "Write unit tests for $FILE_PATH until it has 100% coverage, make sure to add the files to $TEST_FILE_PATH. Do not modify the original code, only add tests. Do not modify other files than $TEST_FILE_PATH." 2>&1 | tee -a /tmp/kwaak.log
  # - name: fluyt
  #   version: "latest"
  #   setup_script: |
  #     apt update;
  #     apt install -y curl fd-find ripgrep gettext-base; # needed for envsubst
  #     echo "Installed apt packages" >> /tmp/setup.log;
  #     ln -s $(which fdfind) /usr/local/bin/fd
  #     echo "Installed fd" >> /tmp/setup.log;
  #     curl -sL https://storage.googleapis.com/bosun-ai-pub/fluyt-cli-x86_64 -o /usr/local/bin/fluyt;
  #     chmod +x /usr/local/bin/fluyt;
  #     echo "Set up fluyt agent" >> /tmp/setup.log;
  #     cat <<- "MANIFEST_EOF" > /tmp/manifest.yaml.tmpl
  #     goal: "Write unit tests for $FILE_PATH until it has 100% coverage"
  #     repository:
  #       url: $REPOSITORY_URL
  #       lang: typescript
  #       commands:
  #         coverage: $TEST_COMMAND
  #         test: $TEST_COMMAND
  #     workspace:
  #       filesystem: LocalUnmanaged
  #     before: []
  #     agents:
  #       - name: "Indexer"
  #         type: IndexRepository
  #         args:
  #           question: ""
  #       - name: "Unit Tester"
  #         type: WriteUnitTestAgent
  #         args:
  #           question: "$FILE_PATH"
  #     after: []
 
  #     MANIFEST_EOF
  #   command: |
  #     export QDRANT_URL=http://172.17.0.1:6334
  #     export REDIS_URL=redis://172.17.0.1:6379
  #     export OPENAI_ENDPOINT=$OPENAI_API_BASE
  #     export OTEL_ENABLED=false
  #     export RUST_BACKTRACE=1
  #     export RUST_LOG=debug
  #     export PORT=8000
  #     env > /tmp/env.txt
  #     envsubst < /tmp/manifest.yaml.tmpl > /tmp/manifest.yaml
  #     echo "Running fluyt agent" >> /tmp/setup.log;
  #     fluyt manifest run -f /tmp/manifest.yaml 2>&1 | tee -a /tmp/fluyt.log

repositories:
  - name: todolist
    url: https://github.com/bosun-ai/todolist.git
    setup_script: |
      echo "Set up todolist repository" >> /tmp/setup.log;
      apt update;
      apt install -y curl;
      curl -sL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh && bash nodesource_setup.sh \
        && apt install -y nodejs && echo "Installed nodejs" >> /tmp/setup.log;
      cd /todolist;
      npm install && echo "Installed npm packages" >> /tmp/setup.log;
    test_command: npm test -- --coverage --watchAll=false --bail=1 -u --coverageReporters=cobertura
    coverage_report_path: /todolist/coverage/cobertura-coverage.xml
    files:
      - [src/AddItem.tsx, src/AddItem.test.tsx]
      - [src/App.tsx, src/App.test.tsx]
      - [src/TodoList.tsx, src/TodoList.test.tsx]
 # - name: derrick
 #   url: https://github.com/bosun-ai/derrick.git
 #   setup_script: |
 #     apt-get update 2>&1 >> /tmp/repo-setup.log;
 #     apt-get install -y build-essential lld curl rustup 2>&1 >> /tmp/repo-setup.log;
 #     cargo install cargo-tarpaulin 2>&1 >> /tmp/repo-setup.log;
 #     cd $PROJECT_ROOT;
 #     rustup default stable 2>&1 >> /tmp/repo-setup.log;
 #     cargo tarpaulin --out xml 2>&1 >> /tmp/repo-setup.log;
 #   test_command: cargo tarpaulin --out xml
 #   coverage_report_path: /derrick/cobertura.xml
 #   files:
 #     - [src/main.rs, src/main.rs]
  - name: tokei
    url: https://github.com/XAMPPRocky/tokei
    setup_script: |
      apt-get update 2>&1 >> /tmp/repo-setup.log;
      apt-get install -y build-essential lld curl pkg-config libssl-dev rustup 2>&1 >> /tmp/repo-setup.log;
      cd $PROJECT_ROOT;
      rustup default stable 2>&1 >> /tmp/repo-setup.log;
      echo "Install rust default was successful: $?" >> /tmp/repo-setup.log;
      rustup run stable cargo install cargo-tarpaulin 2>&1 >> /tmp/repo-setup.log;
      echo "Install tarpaulin was successful: $?" >> /tmp/repo-setup.log;
      rustup run stable cargo tarpaulin --skip-clean --target-dir target/debug --engine llvm --out xml 2>&1 >> /tmp/repo-setup.log
      echo "Run tarpaulin was successful: $?" >> /tmp/repo-setup.log;
    test_command: cargo tarpaulin --skip-clean --target-dir target/debug --engine llvm --out xml
    coverage_report_path: /tokei/cobertura.xml
    files:
      - [src/main.rs, src/main.rs]
      - [src/cli.rs, src/cli.rs]
      - [src/cli_utils.rs, src/cli_utils.rs]
      - [src/config.rs, src/config.rs]
      - [src/input.rs, src/input.rs]
      - [src/language/embedding.rs, src/language/embedding.rs]
      - [src/language/language_type.rs, src/language/language_type.rs]
      - [src/language/languages.rs, src/language/languages.rs]
      - [src/language/mod.rs, src/language/mod.rs]
      - [src/language/syntax.rs, src/language/syntax.rs]
      - [src/sort.rs, src/sort.rs]
      - [src/stats.rs, src/stats.rs]
      - [src/utils/ext.rs, src/utils/ext.rs]
      - [src/utils/fs.rs, src/utils/fs.rs]
