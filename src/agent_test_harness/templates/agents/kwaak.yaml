name: kwaak
version: "v0.8.1"
setup_script: |
  apt update;
  apt install -y curl fd-find ripgrep gettext-base xz-utils libssl-dev;
  # temporary workaround for outdated libssl dependency:
  pushd /tmp
  wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb
  dpkg -i libssl1.1_1.1.1f-1ubuntu2.23_amd64.deb;
  popd
  # end of temporary workaround
  echo "Installed apt packages" >> /tmp/setup.log;
  ln -s $(which fdfind) /usr/local/bin/fd
  echo "Installed fd" >> /tmp/setup.log;
  curl --proto '=https' --tlsv1.2 -LsSf https://github.com/bosun-ai/kwaak/releases/download/v0.8.1/kwaak-installer.sh | sh
  echo "Set up kwaak agent: $?" >> /tmp/setup.log;
  source $HOME/.cargo/env

  cat <<- "CONFIG_EOF" > /tmp/kwaak.toml
  language = "$LANGUAGE"
  tool_executor = "local"
  openai_api_key = "text:$OPENAI_API_KEY"
  otel_enabled = true

  [git]
  owner = "bosun-ai"
  repository = "todolist"
  main_branch = "master"

  [commands]
  test = "$TEST_COMMAND"
  coverage = "$TEST_COMMAND"

  [llm.indexing]
  provider = "OpenAI"
  prompt_model = "gpt-4o-mini"
  base_url = "$OPENAI_API_BASE"

  [llm.query]
  provider = "OpenAI"
  prompt_model = "gpt-4o"
  base_url = "$OPENAI_API_BASE"

  [llm.embedding]
  provider = "OpenAI"
  embedding_model = "text-embedding-3-large"
  base_url = "$OPENAI_API_BASE"

  CONFIG_EOF
command: |
  echo "Running kwaak agent" >> /tmp/setup.log;
  echo "OTEL endpoint: $OTEL_EXPORTER_OTLP_ENDPOINT" >> /tmp/setup.log;
  source $HOME/.cargo/env
  
  # Determining project language by examining the files in the $PROJECT_ROOT. If there's a package.json, it's a Node.js project.
  # if there's a Cargo.toml, it's a Rust project. If there's a requirements.txt or pyproject.toml, it's a Python project.
  if [ -f $PROJECT_ROOT/package.json ]; then
    echo "Detected Node.js project" >> /tmp/setup.log;
    export LANGUAGE="Typescript"
  elif [ -f $PROJECT_ROOT/Cargo.toml ]; then
    echo "Detected Rust project" >> /tmp/setup.log;
    export LANGUAGE="Rust"
  elif find $PROJECT_ROOT -type f \( -name "requirements.txt" -o -name "pyproject.toml" \) | grep -q .; then
    echo "Detected Python project" >> /tmp/setup.log;
    export LANGUAGE="Python"
  fi

  env >> /tmp/setup.log;

  cat <<- "PROMPT_EOF" > /tmp/kwaak.prompt
  $PROMPT
  PROMPT_EOF

  cat /tmp/kwaak.toml | envsubst > /tmp/kwaak.rendered.toml
  cd $PROJECT_ROOT && \
  kwaak -c /tmp/kwaak.rendered.toml run-agent --initial-message "$PROMPT" 2>&1 | tee -a /tmp/kwaak.log
